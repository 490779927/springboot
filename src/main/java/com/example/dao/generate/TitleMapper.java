package com.example.dao.generate;

import com.example.pojo.generate.Title;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.type.JdbcType;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface TitleMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table title
     *
     * @mbg.generated
     */
    @Delete({
        "delete from title",
        "where id = #{id,jdbcType=INTEGER}"
    })
    int deleteByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table title
     *
     * @mbg.generated
     */
    @Insert({
        "insert into title (id, title_name, ",
        "describes, del_flag, ",
        "create_time, update_time)",
        "values (#{id,jdbcType=INTEGER}, #{titleName,jdbcType=VARCHAR}, ",
        "#{describes,jdbcType=VARCHAR}, #{delFlag,jdbcType=INTEGER}, ",
        "#{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP})"
    })
    int insert(Title record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table title
     *
     * @mbg.generated
     */
    @InsertProvider(type=TitleSqlProvider.class, method="insertSelective")
    int insertSelective(Title record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table title
     *
     * @mbg.generated
     */
    @Select({
        "select",
        "id, title_name, describes, del_flag, create_time, update_time",
        "from title",
        "where id = #{id,jdbcType=INTEGER}"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="title_name", property="titleName", jdbcType=JdbcType.VARCHAR),
        @Result(column="describes", property="describes", jdbcType=JdbcType.VARCHAR),
        @Result(column="del_flag", property="delFlag", jdbcType=JdbcType.INTEGER),
        @Result(column="create_time", property="createTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="update_time", property="updateTime", jdbcType=JdbcType.TIMESTAMP)
    })
    Title selectByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table title
     *
     * @mbg.generated
     */
    @UpdateProvider(type=TitleSqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(Title record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table title
     *
     * @mbg.generated
     */
    @Update({
        "update title",
        "set title_name = #{titleName,jdbcType=VARCHAR},",
          "describes = #{describes,jdbcType=VARCHAR},",
          "del_flag = #{delFlag,jdbcType=INTEGER},",
          "create_time = #{createTime,jdbcType=TIMESTAMP},",
          "update_time = #{updateTime,jdbcType=TIMESTAMP}",
        "where id = #{id,jdbcType=INTEGER}"
    })
    int updateByPrimaryKey(Title record);

    @Select({
            "select",
            "id, title_name, describes, del_flag, create_time, update_time",
            "from title"
    })
    @Results({
            @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
            @Result(column="title_name", property="titleName", jdbcType=JdbcType.VARCHAR),
            @Result(column="describes", property="describes", jdbcType=JdbcType.VARCHAR),
            @Result(column="del_flag", property="delFlag", jdbcType=JdbcType.INTEGER),
            @Result(column="create_time", property="createTime", jdbcType=JdbcType.TIMESTAMP),
            @Result(column="update_time", property="updateTime", jdbcType=JdbcType.TIMESTAMP)
    })
    List<Title> getAllUserInfo();
}